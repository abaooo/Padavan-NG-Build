#修改 targets: 中的 psg1218 为你需要编译的型号，注意名称要与configs/templates/目录下的名字相同
# by: TurBoTse

name: Padavan_NG_CI

on: 
#  release:
#    types: [published]
#  push:                                                        # 推送操作
#    tags:
#      - 'v*'
#    branches:                                                  # 分支
#      - main                                                   # 主分支
#  workflow_dispatch:
#  schedule:                                                    # 自动编译时间表
#    - cron: 0 19 * * *                                         # 每天国际时间19点，北京时间凌晨3点执行(北京+8)
  watch:                                                        # 监视操作
    types: [started]                                            # 点击 Star 之后
env:
  targets: psg1218                                              # 设备名称
  images_dir: /opt/images                                       # 固件目录
  build_dir: /opt/rt-n56u                                       # 源码目录
  work_dir: /opt/rt-n56u/trunk                                  # 工作目录
  custom_modify: true                                           # 修改文件
  upload_cowtransfer: true                                      # 上传到奶牛快传
  upload_wetransfer: true                                       # 上传到 WeTransfer
  src_git: https://github.com/TurBoTse/padavan-ng.git           # 源码地址
  config_dir: /opt/rt-n56u/trunk/configs/templates/phicomm      # 设备模板目录
  toolchain_dir: /opt/rt-n56u/toolchain/out                     # 工具链目录
  toolchain_pkg: mipsel-linux-uclibc.tar.xz
  toolchain_url: https://github.com/TurBoTse/padavan-toolchain/releases/download/v1.0
jobs:
  build:
    name: Padavan_NG_CI
    runs-on: ubuntu-20.04
    if: github.event.repository.owner.id == github.event.sender.id  # 自己点的 Star
    steps:
      - name: Checkout main            # 导入主分支
        uses: actions/checkout@main
      - name: Prepare environment      # 准备编译环境
        run: |                         # 安装依赖包
          sudo apt update
          sudo apt install libtool-bin gperf python-docutils autopoint gettext
          sudo timedatectl set-timezone 'Asia/Shanghai'  # 设置时区
      - name: Clone source code
        run: |                         # 克隆源码
          git clone --depth=1 $src_git $build_dir
      - name: Prepare toolchain
        run: |                         # 下载预编译的构建工具链
          mkdir -p $toolchain_dir && mkdir -p $images_dir
          curl -LO ${toolchain_url}/${toolchain_pkg}
          tar -xf $toolchain_pkg -C $toolchain_dir
      - name: Copy custom modify
        if: env.custom_modify == 'true'
        run: |                         # 拷贝文件并修改
          if [ ! -f $config_dir/$targets.config ]; then echo "$config_dir/$targets.config 文件不存在,请检查是否已适配 "; exit 1; fi
          for m in $targets; do if [ ! -f public/$m.sh ]; then echo "public/$m.sh 未找到"
          else
            cp -f public/$m.sh $work_dir; echo "$m.sh 拷贝成功"; fi; done; \
          for m in $targets; do  if [ ! -f public/$m.config ]; then echo "public/$m.config 未找到"
          else
            cp -f public/$m.config $config_dir/$m.config; echo "$m.config 已修改"; fi; done; \
          cp -f public/public.sh $work_dir
          cp -f padavan/config/* $work_dir
          cp -f padavan/scripts/* $work_dir
          cp -rf padavan/modify/* $work_dir
          cd $work_dir
          for m in $targets; do if [ -f $m.config ]; then echo "拷贝 $m.config"; cp -f ./$m.config $config_dir/$m.config; fi; done; \
          cp -f $config_dir/$targets.config .config;    # 拷贝模板到 .config
          for m in $targets; do echo "执行 public.sh"; sh ./public.sh; if [ -f $m.sh ]; then echo "执行 $m.sh"; sh ./$m.sh; fi; done; \
      - name: Start build firmware
        run: |                         # 执行构建固件
          cd $work_dir
          ./clear_tree.sh
          ./build_firmware.sh
          mv -f images/*.trx $images_dir/${targets}_$(date +%Y%m%d).trx
      - name: Upload images to Artifact
        if: ${{ success() }}
        uses: actions/upload-artifact@main
        with:
          name: padavan_${{ env.targets }}
          path: ${{ env.images_dir }}
      - name: Upload images to CowTransfer
        if: env.upload_cowtransfer == 'true' && success()
        run: |                         # 上传到奶牛快传
          curl -fsSL git.io/file-transfer | sh
          ./transfer cow --block 2621440 -s -p 64 --no-progress ${images_dir} 2>&1 | tee cowtransfer.log
          echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"
      - name: Upload images to WeTransfer
        if: env.upload_wetransfer == 'true' && success()
        run: |                         # 上传到 WeTransfer
          curl -fsSL git.io/file-transfer | sh
          ./transfer wet -s -p 16 --no-progress ${images_dir} 2>&1 | tee wetransfer.log
          echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
